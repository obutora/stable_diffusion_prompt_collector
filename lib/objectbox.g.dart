// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'entity/prompt_data.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4888450850669118575),
      name: 'PromptData',
      lastPropertyId: const IdUid(8, 5226793407523698298),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8565462233576636592),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1335178895414573456),
            name: 'prompt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5836349245406465571),
            name: 'updateAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1107802176169420012),
            name: 'rate',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5908225423236260200),
            name: 'isImg2Img',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7144677852075345695),
            name: 'parentImgUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5226793407523698298),
            name: 'imgUrlList',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 4888450850669118575),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [2243660603538069849],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    PromptData: EntityDefinition<PromptData>(
        model: _entities[0],
        toOneRelations: (PromptData object) => [],
        toManyRelations: (PromptData object) => {},
        getId: (PromptData object) => object.id,
        setId: (PromptData object, int id) {
          object.id = id;
        },
        objectToFB: (PromptData object, fb.Builder fbb) {
          final promptOffset = fbb.writeString(object.prompt);
          final parentImgUrlOffset = object.parentImgUrl == null
              ? null
              : fbb.writeString(object.parentImgUrl!);
          final imgUrlListOffset = fbb.writeList(
              object.imgUrlList.map(fbb.writeString).toList(growable: false));
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, promptOffset);
          fbb.addInt64(2, object.updateAt.millisecondsSinceEpoch);
          fbb.addFloat64(4, object.rate);
          fbb.addBool(5, object.isImg2Img);
          fbb.addOffset(6, parentImgUrlOffset);
          fbb.addOffset(7, imgUrlListOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PromptData(
              prompt: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              updateAt: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              imgUrlList: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 18, []),
              rate:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              isImg2Img: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 14, false),
              parentImgUrl: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [PromptData] entity fields to define ObjectBox queries.
class PromptData_ {
  /// see [PromptData.id]
  static final id =
      QueryIntegerProperty<PromptData>(_entities[0].properties[0]);

  /// see [PromptData.prompt]
  static final prompt =
      QueryStringProperty<PromptData>(_entities[0].properties[1]);

  /// see [PromptData.updateAt]
  static final updateAt =
      QueryIntegerProperty<PromptData>(_entities[0].properties[2]);

  /// see [PromptData.rate]
  static final rate =
      QueryDoubleProperty<PromptData>(_entities[0].properties[3]);

  /// see [PromptData.isImg2Img]
  static final isImg2Img =
      QueryBooleanProperty<PromptData>(_entities[0].properties[4]);

  /// see [PromptData.parentImgUrl]
  static final parentImgUrl =
      QueryStringProperty<PromptData>(_entities[0].properties[5]);

  /// see [PromptData.imgUrlList]
  static final imgUrlList =
      QueryStringVectorProperty<PromptData>(_entities[0].properties[6]);
}
